Description: >
  This Template creates the Prediction API Service for Blue/Green Deployment.

Parameters:
  DesiredCount:
    Type: Number
    Default: 0

  VpcId:
    Type: AWS::EC2::VPC::Id

  Cluster:
    Type: String

  LoadBalancer:
    Type: String

  Repository:
    Type: String

  Tag:
    Type: String
    Default: latest

  Port:
    Type: Number

  Identifier:
    Type: String

  IsProduction:
    Type: String

Resources:
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref Port
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      TargetType: ip
      Port: !Ref Port
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Identifier
          Value: !Ref Identifier
        - Key: Image
          Value: !Ref Tag
        - Key: IsProduction
          Value: !Ref IsProduction

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
          - "*"
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - iam:*
                  - sagemaker:*
                  - logs:*
                  - s3:*
                  - ecr:*
                  - cloudwatch:*
                  - application-autoscaling:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
    
    RolePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Resource: "*"
              Effect: Allow
              Action:
                - iam:*
                - sagemaker:*
                - logs:*
                - s3:*
                - ecr:*
                - cloudwatch:*
                - application-autoscaling:*
        Roles:
          - !Ref TaskRole
  
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
          EntryPoint:
            - python
            - app/app.py
          Essential: true
          Memory: 512
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Ref AWS::StackName
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: app
          Environment:
            - Name: Tag
              Value: !Ref Tag
  
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Ref AWS::StackName
        RetentionInDays: 7