AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Template deploys the necessary Lambda Functions to run a Neural Network
  for image classifiication. Additionally the Template configures the status
  alerting SNS Topic, CloudWatch invocation Rule and the  neccessary VPC access
  to back-end resources. 

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  TopicEmail:
    Default: mail@example.com
    Description: E-Mail Address to send Training Alerts
    Type: String

  S3Bucket:
    Default: lnn
    Description: S3 Bucket containing training data and network configuration
    Type: String

  PrivateSubnet1:
    Description: Private Subnet 1
    Type: 'AWS::EC2::Subnet::Id'

  PrivateSubnet2:
    Description: Private Subnet 2
    Type: 'AWS::EC2::Subnet::Id'

  SecurityGroup:
    Description: >-
      The security groups IDs in the VPC that includes the resources to which
      the Lambda function requires access.
    Type: 'AWS::EC2::SecurityGroup::Id'

Resources:
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Description: Publish Alerts and Training Status
    Properties:
      DisplayName: Lambda Neural Network Status Messages
      Subscription:
        - Endpoint: !Ref TopicEmail
          Protocol: email
      TopicName: LNN-SNS

  LaunchLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${EnvironmentName}-LaunchLambda'
      Description: Launches Neural Network training from an S3 training data upload
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: deploy/lambda/train/package.zip
      Handler: launch.lambda_handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python3.6
      MemorySize: '512'
      Timeout: '300'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          SNSArn: !Ref SNSTopic
          TrainerLambda: !GetAtt 
            - TrainerLambda
            - Arn
    DependsOn: LambdaRole

  TrainerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${EnvironmentName}-TrainerLambda'
      Description: Coordinates Forward and Backward Propogation across epochs
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: deploy/lambda/train/package.zip
      Handler: trainer.lambda_handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python3.6
      MemorySize: '1536'
      Timeout: '300'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          SNSArn: !Ref SNSTopic
          NeuronLambda: !GetAtt 
            - NeuronLambda
            - Arn
    DependsOn: LambdaRole

  NeuronLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${EnvironmentName}-NeuronLambda'
      Description: Executes Forwardprop Activation or Backprop Gradient calculation
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: deploy/lambda/train/package.zip
      Handler: neuron.lambda_handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python3.6
      MemorySize: '1536'
      Timeout: '300'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          SNSArn: !Ref SNSTopic
          TrainerLambda: !GetAtt 
            - TrainerLambda
            - Arn
    DependsOn: LambdaRole

  ConfigLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${EnvironmentName}-ConfigLambda'
      Description: Custom Resource to configure S3 Event Trigger
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: deloy/lambda/train/package.zip
      Handler: config.lambda_handler
      Role: !GettAtt
        - LambdaRole
        - Arn
      Runtime: python3.6
      MemorySize: '128'
      Timeout: '300'
      Environment:
        Variables:
          Region: !Ref 'AWS::Region'
          Bucket: !Ref S3Bucket
          Account: !Ref 'AWS::AccountId'
          FunctionArn: !GetAtt
            - LaunchLambda
            - Arn
    DependsOn: LambdaRole

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssunmeRolePolicyDocument:
        Version: 2012-10-27
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LNN-AssumeRole
          PolicyDocument:
            Version: 2012-10-27
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGrouyp'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref SNSTopic
              - Effect: Allow
                Action:
                  - 'lambda:Invoke*'
                Resource:
                  - !GetAtt 
                    - TrainerLambda
                    - Arn
                  - !GetAtt 
                    - NeuronLambda
                    - Arn
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DetachNetworkInterface'
                  - 's3:*'
                  - 'elasticache:*'
                  - 'events:PutRule'
                  - 'events:DeleteRule'
                  - 'events:DescribeRule'
                  - 'events:EnableRule'
                  - 'events:DisableRule'
                Resource:
                  - '*'
